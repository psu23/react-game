{"version":3,"sources":["components/CharacterCard/CharacterCard.js","components/Nav/Nav.js","components/Wrapper/Wrapper.js","components/Title/Title.js","Container.js","components/Message/Message.js","App.js","serviceWorker.js","index.js"],"names":["CharacterCard","props","className","value","id","onClick","handleClick","alt","name","src","image","Nav","href","title","score","topScore","Wrapper","children","Title","Container","Message","correctIncorrect","mixCharacters","array","i","length","j","Math","floor","random","App","state","characters","currentScore","clicked","handleIncrement","newScore","setState","handleMix","indexOf","concat","handleReset","mixedCharacters","this","map","character","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.30c70216.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./CharacterCard.css\";\n\n//this component is for each of the 12 game piece images\nconst CharacterCard = props => (\n    //on the click of card, capture its id\n    //image is retrieved from characters.json\n    <div\n        className = \"card\"\n        value = {props.id}\n        onClick = {() => props.handleClick(props.id)}\n        >\n            <div className = \"img-container\">\n                <img alt = {props.name} src = {props.image} />\n            </div>\n        </div>\n);\n\nexport default CharacterCard;","import React from \"react\";\nimport \"./Nav.css\";\n\n//this component is for the navigation bar that shows the app title, current and top scores\nconst Nav = (props) => (\n    <nav>\n        <div className=\"flash brand animated\">\n            <a href=\"/react-game\">{props.title}</a>\n        </div>\n\n        <div className=\"scores\">\n            <div className=\"current-score\">\n                Current Score: {props.score}\n            </div>\n            <div className=\"current-score\">\n                Top Score: {props.topScore}\n            </div>\n        </div>\n    </nav>\n);\n\nexport default Nav;","import React from \"react\";\nimport \"./Wrapper.css\";\n\n//this component wraps all elements in the game\nconst Wrapper = props => <div className= \"wrapper\" >{props.children}</div>;\n\nexport default Wrapper;","import React from \"react\";\nimport \"./Title.css\";\n\n//This component is for the title of the app\nconst Title = props => <div className = \"title\">{props.children}</div>;\n\nexport default Title;","import React from \"react\";\n\n//Container component for page\nconst Container = props =>\n  <div className= \"container\" >\n    {props.children}\n  </div>;\n\nexport default Container;","import React from \"react\";\nimport \"./Message.css\";\n\n//this component is for showing messages to the user when they make (incorrect) guesses\nconst Message = props => (\n    <div id = \"cor-inc\">\n        {props.correctIncorrect}\n    </div>\n);\n\nexport default Message;","import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport CharacterCard from \"./components/CharacterCard\";\nimport Nav from \"./components/Nav\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport Container from \"./Container\";\nimport characters from \"./characters.json\";\nimport Message from \"./components/Message\";\n\n//This function chooses random spots for the character cards to be placed after each click, to challenge the player\nfunction mixCharacters(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    let j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n};\n\nclass App extends Component {\n  //save state elements: characters, scores, correct/incorrect message when relevant, and an array that keeps track of clicked images \n  state = {\n    characters,\n    currentScore: 0,\n    topScore: 0,\n    correctIncorrect: \"\",\n    clicked: []\n  };\n\n  //keeps track of how many successful clicks are made\n  handleIncrement = () => {\n    const newScore = this.state.currentScore + 1;\n    this.setState({\n      currentScore: newScore,\n      correctIncorrect: \"\"\n    });\n    if (newScore >= this.state.topScore) {\n      this.setState({topScore: newScore});\n    }\n    else if (newScore === 12) {\n      this.setState({correctIncorrect: \"You have said hi to everybody! You win.\"})\n    }\n    this.handleMix();\n  }\n\n  //when an image is click, save its id, determine whether it has been clicked yet; if yes, restart game\n  handleClick = id => {\n    if (this.state.clicked.indexOf(id) === -1) {\n      this.handleIncrement();\n      this.setState({ clicked: this.state.clicked.concat(id) });\n    }\n    else {\n      this.handleReset();\n    }\n  };\n\n  //saves characters during each round\n  handleMix = () => {\n    let mixedCharacters = mixCharacters(characters);\n    this.setState({ characters: mixedCharacters });\n  };\n\n  //when game is restarted, set current score to zero, display top score, tell user to click another card, and empty clicked cards array\n  handleReset = () => {\n    this.setState({\n      currentScore: 0,\n      topScore: this.state.topScore,\n      correctIncorrect: \"Click a card to restart the game.\",\n      clicked: []\n    });\n    this.handleMix();\n  };\n\n  //upon rendering the page, display all stationary text on page\n  render() {\n    return (\n      <Wrapper>\n        <Nav\n          title = \"jujyfruit's party\"\n          score = {this.state.currentScore}\n          topScore = {this.state.topScore}\n        />\n\n        <Title>\n          Say hi to everyone at the party without saying hi to the same people twice! Inspired by Gregg Araki's film 'Nowhere'.\n        </Title>\n\n        <Container>\n          {this.state.characters.map(character =>(\n            <div className = \"card-container\">\n              <CharacterCard\n                key = {character.id}\n                handleClick = {this.handleClick}\n                handleIncrement = {this.handleIncrement}\n                handleReset = {this.handleReset}\n                handleMix = {this.handleMix}\n                id = {character.id}\n                image = {character.image}\n              />\n            </div>\n          ))}\n        </Container>\n\n        <Message \n          correctIncorrect = {this.state.correctIncorrect}\n        />\n\n      </Wrapper>\n    );\n\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}